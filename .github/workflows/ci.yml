name: Build and Push Docker image to AWS ECR

on:
  push:
    branches:
      - development

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

################################################################
##               DETERMINE NEXT VERSION                          ##
##   Used for creating new releases and image tags              ##
################################################################

    - name: Determine Next Version
      id: next_version
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0"
        fi
        NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
        echo "next_tag=$NEXT_TAG" >> $GITHUB_OUTPUT
        echo "Next version: $NEXT_TAG"

################################################################
###                     CREATE RELEASE                          ###
###  Creating release with the tag from the previous step      ###
################################################################

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN_2 }}
      with:
        tag_name: ${{ steps.next_version.outputs.next_tag }}
        release_name: Release ${{ steps.next_version.outputs.next_tag }}
        draft: false
        prerelease: false

################################################################
###                  BUILD DOCKER IMAGE                         ###
###         Build Docker image from the Dockerfile             ###
################################################################

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Extract repository name
      id: repo-name
      run: |
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        REPO_NAME=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

    - name: Build Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.repo-name.outputs.repo_name }}
        IMAGE_TAG: ${{ steps.next_version.outputs.next_tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "image_name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: List Docker Images
      run: docker images

###########################################################
###                  PUSH IMAGE TO ECR                    ###
###     Tag Docker image as "latest" and push to ECR      ###
###########################################################

    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.repo-name.outputs.repo_name }}
        IMAGE_TAG: ${{ steps.next_version.outputs.next_tag }}
      run: |
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest